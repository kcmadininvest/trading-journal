# Generated by Django 4.2.25 on 2025-10-14 17:15

from decimal import Decimal
from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='TopStepTrade',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('topstep_id', models.CharField(help_text='ID unique du trade dans TopStep', max_length=50, unique=True, verbose_name='ID TopStep')),
                ('contract_name', models.CharField(db_index=True, help_text='Symbole du contrat (ex: NQZ5, ESH5, YMH5)', max_length=50, verbose_name='Nom du contrat')),
                ('entered_at', models.DateTimeField(help_text="Date et heure d'entrée dans le trade", verbose_name="Date/Heure d'entrée")),
                ('exited_at', models.DateTimeField(blank=True, help_text='Date et heure de sortie du trade', null=True, verbose_name='Date/Heure de sortie')),
                ('entry_price', models.DecimalField(decimal_places=9, help_text="Prix d'entrée (converti du format US)", max_digits=18, validators=[django.core.validators.MinValueValidator(Decimal('1E-9'))], verbose_name="Prix d'entrée")),
                ('exit_price', models.DecimalField(blank=True, decimal_places=9, help_text='Prix de sortie (converti du format US)', max_digits=18, null=True, verbose_name='Prix de sortie')),
                ('fees', models.DecimalField(decimal_places=5, default=Decimal('0.00000'), help_text='Frais du trade (converti du format US)', max_digits=15, verbose_name='Frais')),
                ('pnl', models.DecimalField(blank=True, decimal_places=9, help_text='Profit ou perte brut (converti du format US)', max_digits=18, null=True, verbose_name='Profit/Perte')),
                ('size', models.DecimalField(decimal_places=4, help_text='Nombre de contrats', max_digits=15, validators=[django.core.validators.MinValueValidator(Decimal('0.0001'))], verbose_name='Taille (Quantité)')),
                ('trade_type', models.CharField(choices=[('Long', 'Long'), ('Short', 'Short')], db_index=True, max_length=10, verbose_name='Type de trade')),
                ('trade_day', models.DateField(blank=True, db_index=True, help_text='Jour du trade (converti du format US)', null=True, verbose_name='Jour de trading')),
                ('trade_duration', models.DurationField(blank=True, help_text='Durée totale du trade', null=True, verbose_name='Durée du trade')),
                ('commissions', models.DecimalField(decimal_places=5, default=Decimal('0.00000'), help_text='Commissions du trade', max_digits=15, verbose_name='Commissions')),
                ('net_pnl', models.DecimalField(blank=True, decimal_places=9, help_text='PnL après déduction des frais et commissions', max_digits=18, null=True, verbose_name='PnL Net')),
                ('pnl_percentage', models.DecimalField(blank=True, decimal_places=4, help_text='Pourcentage de profit/perte', max_digits=10, null=True, verbose_name='PnL %')),
                ('raw_data', models.JSONField(blank=True, help_text='Données originales au format JSON pour référence', null=True, verbose_name='Données brutes')),
                ('notes', models.TextField(blank=True, help_text='Notes personnelles sur ce trade', verbose_name='Notes')),
                ('strategy', models.CharField(blank=True, help_text='Stratégie de trading utilisée', max_length=100, verbose_name='Stratégie')),
                ('imported_at', models.DateTimeField(auto_now_add=True, verbose_name='Importé le')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Modifié le')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='topstep_trades', to=settings.AUTH_USER_MODEL, verbose_name='Utilisateur')),
            ],
            options={
                'verbose_name': 'Trade TopStep',
                'verbose_name_plural': 'Trades TopStep',
                'ordering': ['-entered_at'],
            },
        ),
        migrations.CreateModel(
            name='TopStepImportLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('filename', models.CharField(max_length=255, verbose_name='Nom du fichier')),
                ('total_rows', models.IntegerField(default=0, verbose_name='Lignes totales')),
                ('success_count', models.IntegerField(default=0, verbose_name='Imports réussis')),
                ('error_count', models.IntegerField(default=0, verbose_name='Erreurs')),
                ('skipped_count', models.IntegerField(default=0, verbose_name='Doublons ignorés')),
                ('errors', models.JSONField(blank=True, null=True, verbose_name='Détails des erreurs')),
                ('imported_at', models.DateTimeField(auto_now_add=True, verbose_name='Importé le')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='topstep_imports', to=settings.AUTH_USER_MODEL, verbose_name='Utilisateur')),
            ],
            options={
                'verbose_name': "Log d'import TopStep",
                'verbose_name_plural': "Logs d'import TopStep",
                'ordering': ['-imported_at'],
            },
        ),
        migrations.CreateModel(
            name='TradeStrategy',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('strategy_respected', models.BooleanField(blank=True, help_text='Avez-vous respecté votre stratégie ?', null=True, verbose_name='Stratégie respectée')),
                ('dominant_emotions', models.JSONField(default=list, help_text='Liste des émotions ressenties pendant ce trade', verbose_name='Émotions dominantes')),
                ('gain_if_strategy_respected', models.BooleanField(blank=True, help_text='Auriez-vous gagné en respectant la stratégie ?', null=True, verbose_name='Gain si stratégie respectée')),
                ('tp1_reached', models.BooleanField(default=False, help_text='Premier Take Profit atteint', verbose_name='TP1 atteint')),
                ('tp2_plus_reached', models.BooleanField(default=False, help_text='Deuxième Take Profit ou plus atteint', verbose_name='TP2+ atteint')),
                ('session_rating', models.IntegerField(blank=True, choices=[(1, '1 - Très mauvaise'), (2, '2 - Mauvaise'), (3, '3 - Moyenne'), (4, '4 - Bonne'), (5, '5 - Excellente')], help_text='Note de 1 à 5 pour ce trade', null=True, verbose_name='Note de la session')),
                ('emotion_details', models.TextField(blank=True, help_text='Description détaillée des émotions ressenties', verbose_name='Détails des émotions')),
                ('possible_improvements', models.TextField(blank=True, help_text="Points d'amélioration identifiés", verbose_name='Améliorations possibles')),
                ('screenshot_url', models.URLField(blank=True, help_text="Lien vers l'image TradingView ou autre", verbose_name='URL Screenshot')),
                ('video_url', models.URLField(blank=True, help_text='Lien vers une vidéo YouTube ou autre', verbose_name='URL Vidéo')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Créé le')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Modifié le')),
                ('trade', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='strategy_data', to='trades.topsteptrade', verbose_name='Trade associé')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='trade_strategies', to=settings.AUTH_USER_MODEL, verbose_name='Utilisateur')),
            ],
            options={
                'verbose_name': 'Stratégie de Trade',
                'verbose_name_plural': 'Stratégies de Trades',
                'ordering': ['-created_at'],
                'indexes': [models.Index(fields=['user', '-created_at'], name='trades_trad_user_id_71b867_idx'), models.Index(fields=['trade'], name='trades_trad_trade_i_ef31dc_idx')],
                'unique_together': {('user', 'trade')},
            },
        ),
        migrations.AddIndex(
            model_name='topsteptrade',
            index=models.Index(fields=['user', '-entered_at'], name='trades_tops_user_id_2bf191_idx'),
        ),
        migrations.AddIndex(
            model_name='topsteptrade',
            index=models.Index(fields=['contract_name'], name='trades_tops_contrac_72d32d_idx'),
        ),
        migrations.AddIndex(
            model_name='topsteptrade',
            index=models.Index(fields=['trade_type'], name='trades_tops_trade_t_23defe_idx'),
        ),
        migrations.AddIndex(
            model_name='topsteptrade',
            index=models.Index(fields=['trade_day'], name='trades_tops_trade_d_8c6ba6_idx'),
        ),
        migrations.AddIndex(
            model_name='topsteptrade',
            index=models.Index(fields=['topstep_id'], name='trades_tops_topstep_29cec5_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='topsteptrade',
            unique_together={('user', 'topstep_id')},
        ),
    ]
